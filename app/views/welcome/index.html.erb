<div id="container">
  <div id="graph-container"></div>
</div>
<script>
 var g = {
   nodes: [],
   edges: []
 };

 // Create new Sigma instance in graph-container div (use your div name here)
 s = new sigma({
   graph: g,
   renderer: {
     container: document.getElementById('graph-container'),
     type: 'canvas',
   },
   settings: {
     enableEdgeHovering: true,
     edgeHoverColor: 'edge',
     defaultEdgeHoverColor: '#ccc',
     minEdgeSize: 0.5,
     maxEdgeSize: 4,
     edgeHoverSizeRatio: 1,
     edgeHoverExtremities: true,
     nodeActiveColor: 'default',
     borderSize: 2,
     outerBorderSize: 1,
     defaultNodeBorderColor: '#fff',
     nodeBorderColor: 'default',
     defaultNodeOuterBorderColor: 'rgb(236, 81, 72)',
     imageThreshhold: 0,
   }
 });
 
 sigma.parsers.json(
   '/data',
   s,
   function() {
	 var nodes = s.graph.nodes();
	 for (var i = 0; i < nodes.length; i++) {
	   nodes[i].x = 100 * Math.cos(2 * i * Math.PI / nodes.length);
	   nodes[i].y = 100 * Math.sin(2 * i * Math.PI / nodes.length);
	   nodes[i].size = nodes[i].size;
	   nodes[i].color = '#0084B4';
     nodes[i].active = false;
	 }

	 for (var i = 0; i < s.graph.edges.length; i++) {
	   s.graph.edges[i].size = 3;
     s.graph.edges[i].active = false;
	 }

	 s.refresh();
 
	 sigma.layouts.startForceAtlas2(s, {
       worker: true,
	   autoStop: true,
	   background: true,
	   gravity: 0,
	   easing: 'cubicInOut'
	 });
 });

// the ActiveState plugin:
var activeState = sigma.plugins.activeState(s);
var isShift = false;

s.bind('clickNode', function(e) {
  angular.element.event.trigger({type:"show.person", person: e.data.node});
});
s.bind('overNode', function(e) {
  var ns = [], nodes = s.graph.nodes();
  if(!isShift)
    activeState.dropNodes();
  activeState.dropEdges();
  activeState.addNodes(e.data.node.id);
  activeState.setEdgesBy(function(edge){
    return edge.source == e.data.node.id ? true : false ;
  });
  angular.element.event.trigger({type:"show.person.small", person: e.data.node});
  s.refresh({skipIndexation: true});
});

$(document).on('keydown', function(e){
  if(e.keyCode == 16)
    isShift = true;
  if(e.keyCode == 27) {
    activeState.dropNodes();
    activeState.dropEdges();
    s.refresh({skipIndexation: true});
  }
});
$(document).on('keyup', function(e){
  if(e.keyCode == 16)
    isShift = false;
});

</script>

<%= render partial: 'welcome/modal' %>
