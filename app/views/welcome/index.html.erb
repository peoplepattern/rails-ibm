<div id="container">
  <style>
    body {
      color: #333;
      font-size: 14px;
      font-family: sans-serif;
    }
    #graph-container {
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
     position: absolute;
	 margin: 20px;
    }
    #control-pane {
      top: 10px;
      /*bottom: 10px;*/
      right: 10px;
      position: absolute;
      width: 230px;
      background-color: rgb(249, 247, 237);
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
    }
    #control-pane > div {
      margin: 10px;
      overflow-x: auto;
    }
    .line {
      clear: both;
      display: block;
      width: 100%;
      margin: 0;
      padding: 12px 0 0 0;
      border-bottom: 1px solid #aac789;
      background: transparent;
    }
    h2, h3, h4 {
      padding: 0;
      font-variant: small-caps;
    }
    .green {
      color: #437356;
    }
    h2.underline {
      color: #437356;
      background: #f4f0e4;
      margin: 0;
      border-radius: 2px;
      padding: 8px 12px;
      font-weight: 700;
    }
    .hidden {
      display: none;
      visibility: hidden;
    }

    input[type=range] {
      width: 160px;
    }
  </style>
  <div id="graph-container"></div>
</div>
<script>
/**
 * This is an example on how to use sigma locate plugin on a real-world graph.
 */

/**
 * DOM utility function
 */
var $ = function (id) {
  return document.getElementById(id);
};


 var g = {
   nodes: [],
   edges: []
 };

 // Create new Sigma instance in graph-container div (use your div name here)
 s = new sigma({
   graph: g,
   container: 'graph-container',
   renderer: {
	 container: document.getElementById('graph-container'),
	 type: 'canvas'
   },
   settings: {
	 minNodeSize: 8,
	 maxNodeSize: 16
   }
 });
 
sigma.parsers.json(
   '/data',
   s,
   function() {
	 var nodes = s.graph.nodes();
	 for (var i = 0; i < nodes.length; i++) {
	   nodes[i].x = Math.random();
	   nodes[i].y = Math.random();
	   nodes[i].size = nodes[i].size;
	 }

	 s.refresh();
 
	 sigma.layouts.startForceAtlas2(s, {
	   worker: true,
	   autoStop: true,
	   background: true,
	   scaleRatio: 10,
	   gravity: 3,
	   easing: 'cubicInOut'
	 });
   });
</script>

